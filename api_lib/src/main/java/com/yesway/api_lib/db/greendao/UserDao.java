package com.yesway.api_lib.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yesway.api_lib.moudel.common.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, String> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Oem_id = new Property(1, String.class, "oem_id", false, "OEM_ID");
        public final static Property CustomerName = new Property(2, String.class, "customerName", false, "CUSTOMER_NAME");
        public final static Property CustomerProvince = new Property(3, String.class, "customerProvince", false, "CUSTOMER_PROVINCE");
        public final static Property CustomerProvinceId = new Property(4, String.class, "customerProvinceId", false, "CUSTOMER_PROVINCE_ID");
        public final static Property CustomerCity = new Property(5, String.class, "customerCity", false, "CUSTOMER_CITY");
        public final static Property CustomerCityId = new Property(6, String.class, "customerCityId", false, "CUSTOMER_CITY_ID");
        public final static Property CustomerArea = new Property(7, String.class, "customerArea", false, "CUSTOMER_AREA");
        public final static Property CustomerAddress = new Property(8, String.class, "customerAddress", false, "CUSTOMER_ADDRESS");
        public final static Property CustomerNickName = new Property(9, String.class, "customerNickName", false, "CUSTOMER_NICK_NAME");
        public final static Property CustomerAvatar = new Property(10, String.class, "customerAvatar", false, "CUSTOMER_AVATAR");
        public final static Property CustomerAge = new Property(11, int.class, "customerAge", false, "CUSTOMER_AGE");
        public final static Property CustomerGender = new Property(12, int.class, "customerGender", false, "CUSTOMER_GENDER");
        public final static Property CustomerBirthday = new Property(13, String.class, "customerBirthday", false, "CUSTOMER_BIRTHDAY");
        public final static Property CustomerBirthdayString = new Property(14, String.class, "customerBirthdayString", false, "CUSTOMER_BIRTHDAY_STRING");
        public final static Property CustomerPhoneNumber = new Property(15, String.class, "customerPhoneNumber", false, "CUSTOMER_PHONE_NUMBER");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"OEM_ID\" TEXT," + // 1: oem_id
                "\"CUSTOMER_NAME\" TEXT," + // 2: customerName
                "\"CUSTOMER_PROVINCE\" TEXT," + // 3: customerProvince
                "\"CUSTOMER_PROVINCE_ID\" TEXT," + // 4: customerProvinceId
                "\"CUSTOMER_CITY\" TEXT," + // 5: customerCity
                "\"CUSTOMER_CITY_ID\" TEXT," + // 6: customerCityId
                "\"CUSTOMER_AREA\" TEXT," + // 7: customerArea
                "\"CUSTOMER_ADDRESS\" TEXT," + // 8: customerAddress
                "\"CUSTOMER_NICK_NAME\" TEXT," + // 9: customerNickName
                "\"CUSTOMER_AVATAR\" TEXT," + // 10: customerAvatar
                "\"CUSTOMER_AGE\" INTEGER NOT NULL ," + // 11: customerAge
                "\"CUSTOMER_GENDER\" INTEGER NOT NULL ," + // 12: customerGender
                "\"CUSTOMER_BIRTHDAY\" TEXT," + // 13: customerBirthday
                "\"CUSTOMER_BIRTHDAY_STRING\" TEXT," + // 14: customerBirthdayString
                "\"CUSTOMER_PHONE_NUMBER\" TEXT);"); // 15: customerPhoneNumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String oem_id = entity.getOem_id();
        if (oem_id != null) {
            stmt.bindString(2, oem_id);
        }
 
        String customerName = entity.getCustomerName();
        if (customerName != null) {
            stmt.bindString(3, customerName);
        }
 
        String customerProvince = entity.getCustomerProvince();
        if (customerProvince != null) {
            stmt.bindString(4, customerProvince);
        }
 
        String customerProvinceId = entity.getCustomerProvinceId();
        if (customerProvinceId != null) {
            stmt.bindString(5, customerProvinceId);
        }
 
        String customerCity = entity.getCustomerCity();
        if (customerCity != null) {
            stmt.bindString(6, customerCity);
        }
 
        String customerCityId = entity.getCustomerCityId();
        if (customerCityId != null) {
            stmt.bindString(7, customerCityId);
        }
 
        String customerArea = entity.getCustomerArea();
        if (customerArea != null) {
            stmt.bindString(8, customerArea);
        }
 
        String customerAddress = entity.getCustomerAddress();
        if (customerAddress != null) {
            stmt.bindString(9, customerAddress);
        }
 
        String customerNickName = entity.getCustomerNickName();
        if (customerNickName != null) {
            stmt.bindString(10, customerNickName);
        }
 
        String customerAvatar = entity.getCustomerAvatar();
        if (customerAvatar != null) {
            stmt.bindString(11, customerAvatar);
        }
        stmt.bindLong(12, entity.getCustomerAge());
        stmt.bindLong(13, entity.getCustomerGender());
 
        String customerBirthday = entity.getCustomerBirthday();
        if (customerBirthday != null) {
            stmt.bindString(14, customerBirthday);
        }
 
        String customerBirthdayString = entity.getCustomerBirthdayString();
        if (customerBirthdayString != null) {
            stmt.bindString(15, customerBirthdayString);
        }
 
        String customerPhoneNumber = entity.getCustomerPhoneNumber();
        if (customerPhoneNumber != null) {
            stmt.bindString(16, customerPhoneNumber);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String oem_id = entity.getOem_id();
        if (oem_id != null) {
            stmt.bindString(2, oem_id);
        }
 
        String customerName = entity.getCustomerName();
        if (customerName != null) {
            stmt.bindString(3, customerName);
        }
 
        String customerProvince = entity.getCustomerProvince();
        if (customerProvince != null) {
            stmt.bindString(4, customerProvince);
        }
 
        String customerProvinceId = entity.getCustomerProvinceId();
        if (customerProvinceId != null) {
            stmt.bindString(5, customerProvinceId);
        }
 
        String customerCity = entity.getCustomerCity();
        if (customerCity != null) {
            stmt.bindString(6, customerCity);
        }
 
        String customerCityId = entity.getCustomerCityId();
        if (customerCityId != null) {
            stmt.bindString(7, customerCityId);
        }
 
        String customerArea = entity.getCustomerArea();
        if (customerArea != null) {
            stmt.bindString(8, customerArea);
        }
 
        String customerAddress = entity.getCustomerAddress();
        if (customerAddress != null) {
            stmt.bindString(9, customerAddress);
        }
 
        String customerNickName = entity.getCustomerNickName();
        if (customerNickName != null) {
            stmt.bindString(10, customerNickName);
        }
 
        String customerAvatar = entity.getCustomerAvatar();
        if (customerAvatar != null) {
            stmt.bindString(11, customerAvatar);
        }
        stmt.bindLong(12, entity.getCustomerAge());
        stmt.bindLong(13, entity.getCustomerGender());
 
        String customerBirthday = entity.getCustomerBirthday();
        if (customerBirthday != null) {
            stmt.bindString(14, customerBirthday);
        }
 
        String customerBirthdayString = entity.getCustomerBirthdayString();
        if (customerBirthdayString != null) {
            stmt.bindString(15, customerBirthdayString);
        }
 
        String customerPhoneNumber = entity.getCustomerPhoneNumber();
        if (customerPhoneNumber != null) {
            stmt.bindString(16, customerPhoneNumber);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // oem_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // customerName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // customerProvince
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // customerProvinceId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // customerCity
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // customerCityId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // customerArea
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // customerAddress
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // customerNickName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // customerAvatar
            cursor.getInt(offset + 11), // customerAge
            cursor.getInt(offset + 12), // customerGender
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // customerBirthday
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // customerBirthdayString
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // customerPhoneNumber
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setOem_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCustomerName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCustomerProvince(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCustomerProvinceId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCustomerCity(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCustomerCityId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCustomerArea(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCustomerAddress(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCustomerNickName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCustomerAvatar(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCustomerAge(cursor.getInt(offset + 11));
        entity.setCustomerGender(cursor.getInt(offset + 12));
        entity.setCustomerBirthday(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCustomerBirthdayString(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCustomerPhoneNumber(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final String updateKeyAfterInsert(User entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
